// <auto-generated />
using System;
using DataModel.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataModel.Migrations.SqliteMigrations
{
    [DbContext(typeof(AuctionDBContext))]
    partial class AuctionDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("DataModel.Entity.AuctionEntity.Bid", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasPrecision(9, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BidderId");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserID");

                    b.ToTable("Bid", "AuctionDB");
                });

            modelBuilder.Entity("DataModel.Entity.AuctionEntity.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Category", "AuctionDB");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Code = "CAT0001",
                            CreatedBy = "Ron_cr",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 13, 525, DateTimeKind.Utc).AddTicks(9792),
                            Description = "Automotive and Spare parts category",
                            IPAddress = "10.56.89.255",
                            Icon = "LocalShipping",
                            Name = "Automotive and Spare parts",
                            UpdatedBy = "Ron_up"
                        },
                        new
                        {
                            ID = 2,
                            Code = "CAT0002",
                            CreatedBy = "Ron_cr",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 13, 525, DateTimeKind.Utc).AddTicks(9795),
                            Description = "Cell Phones & Accessories category",
                            IPAddress = "10.56.89.255",
                            Icon = "LocalShipping",
                            Name = "Cell Phones & Accessories",
                            UpdatedBy = "Ron_up"
                        },
                        new
                        {
                            ID = 3,
                            Code = "CAT0003",
                            CreatedBy = "Ron_cr",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 13, 525, DateTimeKind.Utc).AddTicks(9797),
                            Description = "Cell Phones & Accessories category",
                            IPAddress = "10.56.89.255",
                            Icon = "LocalShipping",
                            Name = "Consumer Electronics",
                            UpdatedBy = "Ron_up"
                        },
                        new
                        {
                            ID = 4,
                            Code = "CAT0004",
                            CreatedBy = "Ron_cr",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 13, 525, DateTimeKind.Utc).AddTicks(9799),
                            Description = "Jewelry & Watches category",
                            IPAddress = "10.56.89.255",
                            Icon = "LocalShipping",
                            Name = "Jewelry & Watches",
                            UpdatedBy = "Ron_up"
                        },
                        new
                        {
                            ID = 5,
                            Code = "CAT0005",
                            CreatedBy = "Ron_cr",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 13, 525, DateTimeKind.Utc).AddTicks(9801),
                            Description = "Consumer Electronics category",
                            IPAddress = "10.56.89.255",
                            Icon = "LocalShipping",
                            Name = "Consumer Electronics",
                            UpdatedBy = "Ron_up"
                        },
                        new
                        {
                            ID = 6,
                            Code = "CAT0006",
                            CreatedBy = "Ron_cr",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 13, 525, DateTimeKind.Utc).AddTicks(9802),
                            Description = "Real Estate category",
                            IPAddress = "10.56.89.255",
                            Icon = "LocalShipping",
                            Name = "Real Estate",
                            UpdatedBy = "Ron_up"
                        });
                });

            modelBuilder.Entity("DataModel.Entity.AuctionEntity.Designation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DesignationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Designation", "AuctionDB");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = "Ron_cr",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 13, 525, DateTimeKind.Utc).AddTicks(9986),
                            Description = "Senior full-stack software engineer",
                            IPAddress = "10.56.89.255",
                            JobTitle = "Senior Software Engineer",
                            UpdatedBy = "Ron_up"
                        });
                });

            modelBuilder.Entity("DataModel.Entity.AuctionEntity.ItemCondition", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("ItemCondition", "AuctionDB");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = "Ron_cr",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 13, 525, DateTimeKind.Utc).AddTicks(9866),
                            Description = "A brand-new, unused, unopened, unworn, undamaged item. Most categories support this condition (as long as condition is an applicable concept.",
                            IPAddress = "10.56.89.255",
                            State = "New",
                            UpdatedBy = "Ron_up"
                        },
                        new
                        {
                            ID = 2,
                            CreatedBy = "Ron_cr",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 13, 525, DateTimeKind.Utc).AddTicks(9870),
                            Description = "A brand-new new, unused item with no signs of wear. Packaging may be missing or opened. The item may be a factory second or have defects",
                            IPAddress = "10.56.89.255",
                            State = "New other",
                            UpdatedBy = "Ron_up"
                        },
                        new
                        {
                            ID = 3,
                            CreatedBy = "Ron_cr",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 13, 525, DateTimeKind.Utc).AddTicks(9872),
                            Description = "A brand-new, unused, and unworn item. The item may have cosmetic defects, and/or may contain mismarked tags (e.g., incorrect size tags from the manufacturer). Packaging may be missing or opened. The item may be a new factory second or irregular.",
                            IPAddress = "10.56.89.255",
                            State = "New with defects",
                            UpdatedBy = "Ron_up"
                        },
                        new
                        {
                            ID = 4,
                            CreatedBy = "Ron_cr",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 13, 525, DateTimeKind.Utc).AddTicks(9873),
                            Description = "The item is in a pristine, like-new condition. It has been professionally inspected, cleaned, and refurbished by the manufacturer or a manufacturer-approved vendor to meet manufacturer specifications. The item will be in new packaging with original or new accessories.",
                            IPAddress = "10.56.89.255",
                            State = "Refurbished",
                            UpdatedBy = "Ron_up"
                        },
                        new
                        {
                            ID = 5,
                            CreatedBy = "Ron_cr",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 13, 525, DateTimeKind.Utc).AddTicks(9875),
                            Description = "The item is in like-new condition, backed by a one year warranty. It has been professionally refurbished, inspected, and cleaned to excellent condition by qualified sellers. The item includes original or new accessories and will come in new generic packaging. See the seller's listing for full details.",
                            IPAddress = "10.56.89.255",
                            State = "Excellent - Refurbished",
                            UpdatedBy = "Ron_up"
                        },
                        new
                        {
                            ID = 6,
                            CreatedBy = "Ron_cr",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 13, 525, DateTimeKind.Utc).AddTicks(9877),
                            Description = "An item that looks as if it was just taken out of shrink wrap. No visible wear, and all facets of the item are flawless and intact. See the seller's listing for full details and description of any imperfections.",
                            IPAddress = "10.56.89.255",
                            State = "Like New",
                            UpdatedBy = "Ron_up"
                        },
                        new
                        {
                            ID = 7,
                            CreatedBy = "Ron_cr",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 13, 525, DateTimeKind.Utc).AddTicks(9878),
                            Description = "An item that has been used previously. The item may have some signs of cosmetic wear, but is fully operational and functions as intended. This item may be a floor model or store return that has been used. Most categories support this condition (as long as condition is an applicable concept).",
                            IPAddress = "10.56.89.255",
                            State = "Used",
                            UpdatedBy = "Ron_up"
                        },
                        new
                        {
                            ID = 8,
                            CreatedBy = "Ron_cr",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 13, 525, DateTimeKind.Utc).AddTicks(9880),
                            Description = "An item that is used but still in very good condition. No obvious damage to the cover or jewel case. No missing or damaged pages or liner notes. The instructions (if applicable) are included in the box. May have very minimal identifying marks on the inside cover. Very minimal wear and tear.",
                            IPAddress = "10.56.89.255",
                            State = "Very Good",
                            UpdatedBy = "Ron_up"
                        },
                        new
                        {
                            ID = 9,
                            CreatedBy = "Ron_cr",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 13, 525, DateTimeKind.Utc).AddTicks(9882),
                            Description = "An item with obvious or significant wear, but still operational. For books, liner notes, or instructions, the item may have some damage to the cover but the integrity is still intact. Instructions and/or box may be missing. For books, possible writing in margins, etc., but no missing pages or anything that would compromise the legibility or understanding of the text.",
                            IPAddress = "10.56.89.255",
                            State = "Acceptable",
                            UpdatedBy = "Ron_up"
                        },
                        new
                        {
                            ID = 10,
                            CreatedBy = "Ron_cr",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 13, 525, DateTimeKind.Utc).AddTicks(9883),
                            Description = "An item that does not function as intended and is not fully operational. This includes items that are defective in ways that render them difficult to use, items that require service or repair, or items missing essential components. Supported in categories where parts or non-working items are of interest to people who repair or collect related items.",
                            IPAddress = "10.56.89.255",
                            State = "For parts or not working",
                            UpdatedBy = "Ron_up"
                        });
                });

            modelBuilder.Entity("DataModel.Entity.AuctionEntity.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AuctionDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AuctionEndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CategoryID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("InspectionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("InspectionSummary")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemConditionID")
                        .HasColumnType("INTEGER");

                    b.Property<float?>("Lat")
                        .HasColumnType("REAL");

                    b.Property<float?>("Lng")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Rating")
                        .HasPrecision(2, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(9, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("AuctioneerId");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("ItemConditionID");

                    b.HasIndex("UserID");

                    b.ToTable("Product", "AuctionDB");
                });

            modelBuilder.Entity("DataModel.Entity.AuctionEntity.ProductPictures", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductPictures", "AuctionDB");
                });

            modelBuilder.Entity("DataModel.Entity.Jobs.JobPost", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ClosingDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(7000)
                        .HasColumnType("TEXT");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActived")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganisationID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("OrganisationID");

                    b.HasIndex("UserID");

                    b.ToTable("JobPost");
                });

            modelBuilder.Entity("DataModel.Entity.Jobs.Organisation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("LogoPath")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tin")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Tin")
                        .IsUnique();

                    b.ToTable("Organisation", "JobsDB");
                });

            modelBuilder.Entity("DataModel.Entity.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRevorked")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken", "UserDM");
                });

            modelBuilder.Entity("DataModel.Entity.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Role", "UserDM");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 12, 865, DateTimeKind.Utc).AddTicks(8830),
                            Description = "User role",
                            IPAddress = "",
                            Name = "User",
                            UpdatedBy = ""
                        },
                        new
                        {
                            ID = 2,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 12, 865, DateTimeKind.Utc).AddTicks(8877),
                            Description = "Admin role",
                            IPAddress = "",
                            Name = "Admin",
                            UpdatedBy = ""
                        },
                        new
                        {
                            ID = 3,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 12, 865, DateTimeKind.Utc).AddTicks(8900),
                            Description = "HOD role",
                            IPAddress = "",
                            Name = "HOD",
                            UpdatedBy = ""
                        },
                        new
                        {
                            ID = 4,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 12, 865, DateTimeKind.Utc).AddTicks(8921),
                            Description = "Manager role",
                            IPAddress = "",
                            Name = "Manager",
                            UpdatedBy = ""
                        },
                        new
                        {
                            ID = 5,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 12, 865, DateTimeKind.Utc).AddTicks(8942),
                            Description = "Master Admin role",
                            IPAddress = "",
                            Name = "MasterAdmin",
                            UpdatedBy = ""
                        },
                        new
                        {
                            ID = 6,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 12, 865, DateTimeKind.Utc).AddTicks(8968),
                            Description = "HR Admin",
                            IPAddress = "",
                            Name = "HROffice",
                            UpdatedBy = ""
                        },
                        new
                        {
                            ID = 7,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 12, 865, DateTimeKind.Utc).AddTicks(8996),
                            Description = "Director role",
                            IPAddress = "",
                            Name = "Director",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("DataModel.Entity.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordResetToken")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserTypeID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserTypeID");

                    b.ToTable("User", "UserDM");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AddressLine1 = "First Road X road",
                            AddressLine2 = "10 , Fox Street",
                            City = "Levuka",
                            Country = "Fiji",
                            CreatedBy = "Admin-cr",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 13, 36, DateTimeKind.Utc).AddTicks(3351),
                            DOB = new DateTime(1956, 7, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            Gender = 3,
                            IPAddress = "107.23.365.369",
                            ImagePath = "",
                            IsActive = true,
                            LastName = "Limited",
                            Password = "$2a$11$urJhnxkT/27UkZaWQyW/XOULXe5lFcH43sgkG36Yc7DcRBE2FYJVO",
                            PasswordResetToken = "",
                            Phone = "9090337",
                            PostalCode = "0123",
                            State = "BlackWater",
                            UpdatedBy = "Manager-up",
                            UserTypeID = 1
                        },
                        new
                        {
                            ID = 2,
                            AddressLine1 = "Fula Fula Road",
                            AddressLine2 = "10, Black street",
                            City = "Apia",
                            Country = "Samoa",
                            CreatedBy = "Admin-cr",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 13, 204, DateTimeKind.Utc).AddTicks(4227),
                            DOB = new DateTime(1979, 7, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john@mail.com",
                            FirstName = "John",
                            Gender = 1,
                            IPAddress = "107.23.365.369",
                            ImagePath = "",
                            IsActive = true,
                            LastName = "Smith",
                            Password = "$2a$11$N7qDDJ.uv2kjFM3Ew9L/Qu3gfJQoSuwlCddTLElf.jfoOAGXeKco.",
                            PasswordResetToken = "",
                            Phone = "74789699",
                            PostalCode = "458",
                            State = "North",
                            UpdatedBy = "Admin-up",
                            UserTypeID = 1
                        },
                        new
                        {
                            ID = 3,
                            AddressLine1 = "Rock line Island",
                            AddressLine2 = "29, Bush mount road",
                            City = "Port Vila",
                            Country = "Vanuatu",
                            CreatedBy = "Admin-cr",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 13, 363, DateTimeKind.Utc).AddTicks(3977),
                            DOB = new DateTime(1983, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "peter@mail.com",
                            FirstName = "Peter",
                            Gender = 3,
                            IPAddress = "107.23.365.369",
                            ImagePath = "",
                            IsActive = true,
                            LastName = "Gates",
                            Password = "$2a$11$d0eW1YZP7f7bGVqOUWeGiuRytXDPwEr/MTpLGezSwIpnkYy0ebxB6",
                            PasswordResetToken = "",
                            Phone = "8890337",
                            PostalCode = "889",
                            State = "Ocean",
                            UpdatedBy = "Admin-up",
                            UserTypeID = 1
                        },
                        new
                        {
                            ID = 4,
                            AddressLine1 = "Manukau Cresent",
                            AddressLine2 = "41, Black place",
                            City = "Auckland",
                            Country = "New zealand",
                            CreatedBy = "Admin-cr",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 13, 525, DateTimeKind.Utc).AddTicks(8639),
                            DOB = new DateTime(1983, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "monika@mail.com",
                            FirstName = "Monika",
                            Gender = 2,
                            IPAddress = "107.23.365.369",
                            ImagePath = "",
                            IsActive = true,
                            LastName = "Kumar",
                            Password = "$2a$11$AN0oa6iZVJgJo6T9WN1EAObtwJc1iGeVHQztniWYdLaz8CQgIvMKS",
                            PasswordResetToken = "",
                            Phone = "9090337",
                            PostalCode = "064",
                            State = "North",
                            UpdatedBy = "Admin-up",
                            UserTypeID = 1
                        });
                });

            modelBuilder.Entity("DataModel.Entity.UserPictures", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppUserID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("AppUserID");

                    b.ToTable("UserPictures", "UserDM");
                });

            modelBuilder.Entity("DataModel.Entity.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", "UserDM");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1,
                            CreatedBy = "Admin-cr",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 13, 525, DateTimeKind.Utc).AddTicks(9712),
                            IPAddress = "107.23.365.369",
                            UpdatedBy = "Admin-up"
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 5,
                            CreatedBy = "Admin-cr",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 13, 525, DateTimeKind.Utc).AddTicks(9718),
                            IPAddress = "107.23.365.369",
                            UpdatedBy = "Admin-up"
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 7,
                            CreatedBy = "Admin-cr",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 13, 525, DateTimeKind.Utc).AddTicks(9720),
                            IPAddress = "107.23.365.369",
                            UpdatedBy = "Admin-up"
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1,
                            CreatedBy = "Admin-cr",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 13, 525, DateTimeKind.Utc).AddTicks(9722),
                            IPAddress = "107.23.365.369",
                            UpdatedBy = "Admin-up"
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 1,
                            CreatedBy = "Admin-cr",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 13, 525, DateTimeKind.Utc).AddTicks(9724),
                            IPAddress = "107.23.365.369",
                            UpdatedBy = "Admin-up"
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2,
                            CreatedBy = "Admin-cr",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 13, 525, DateTimeKind.Utc).AddTicks(9726),
                            IPAddress = "107.23.365.369",
                            UpdatedBy = "Admin-up"
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 5,
                            CreatedBy = "Admin-cr",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 13, 525, DateTimeKind.Utc).AddTicks(9728),
                            IPAddress = "107.23.365.369",
                            UpdatedBy = "Admin-up"
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 1,
                            CreatedBy = "Admin-cr",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 13, 525, DateTimeKind.Utc).AddTicks(9730),
                            IPAddress = "107.23.365.369",
                            UpdatedBy = "Admin-up"
                        });
                });

            modelBuilder.Entity("DataModel.Entity.UserType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("UserType", "UserDM");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Code = "C",
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 13, 525, DateTimeKind.Utc).AddTicks(9597),
                            Description = "Organisation or Individual who receives service.",
                            IPAddress = "",
                            Name = "Client",
                            UpdatedBy = ""
                        },
                        new
                        {
                            ID = 2,
                            Code = "B",
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 8, 13, 11, 41, 13, 525, DateTimeKind.Utc).AddTicks(9599),
                            Description = "Service provider",
                            IPAddress = "",
                            Name = "Enterprise",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("DataModel.Entity.AuctionEntity.Bid", b =>
                {
                    b.HasOne("DataModel.Entity.AuctionEntity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataModel.Entity.AuctionEntity.Product", b =>
                {
                    b.HasOne("DataModel.Entity.AuctionEntity.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.Entity.AuctionEntity.ItemCondition", "ItemCondition")
                        .WithMany()
                        .HasForeignKey("ItemConditionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("ItemCondition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataModel.Entity.AuctionEntity.ProductPictures", b =>
                {
                    b.HasOne("DataModel.Entity.AuctionEntity.Product", "Product")
                        .WithMany("ProductPictures")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DataModel.Entity.Jobs.JobPost", b =>
                {
                    b.HasOne("DataModel.Entity.Jobs.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataModel.Entity.RefreshToken", b =>
                {
                    b.HasOne("DataModel.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataModel.Entity.User", b =>
                {
                    b.HasOne("DataModel.Entity.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("DataModel.Entity.UserPictures", b =>
                {
                    b.HasOne("DataModel.Entity.User", "AppUser")
                        .WithMany("UserPictures")
                        .HasForeignKey("AppUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("DataModel.Entity.UserRole", b =>
                {
                    b.HasOne("DataModel.Entity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.Entity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataModel.Entity.AuctionEntity.Product", b =>
                {
                    b.Navigation("ProductPictures");
                });

            modelBuilder.Entity("DataModel.Entity.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("DataModel.Entity.User", b =>
                {
                    b.Navigation("UserPictures");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
